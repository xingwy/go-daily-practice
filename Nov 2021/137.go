// 需求：给你一个整数数组 nums ，除某个元素仅出现 一次 外，其余每个元素都恰出现 三次 。请你找出并返回那个只出现了一次的元素。
// 方案：其实可以将每一个数分割成21位二进制，对于每一位，数字为1的个数肯定是 3 * M + 1、 3 * M 其中的一个，可以判断是哪一个来决定最终答案此位的数值
//      那么，总计算次数将会是 32 * N。

// 优化：我们每次都是累加某一位的值（状态），来决定最终值，我们是否可以做整体状态切换
// Tip：异或运算：x ^ 0 = x​ ， x ^ 1 = ~x
//      与运算：x & 0 = 0 ， x & 1 = x
// 状态机目标： 0->1->2->0

func singleNumber(nums []int) int {
	a, b := 0, 0
    for _, num := range nums {
        b = (b ^ num) &^ a
        a = (a ^ num) &^ b
    }
    return b
}